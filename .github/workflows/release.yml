name: Create Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create manifest.txt
      run: |
        find . -type f | xargs sha256sum > manifest.txt

    - name: Set up Git user
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Create Tag
      id: create_tag
      run: |
        TAG_NAME=$(date +'%Y%m%d%H%M%S')
        echo "::set-output name=tag_name::\"$TAG_NAME\""
        git tag $TAG_NAME -a -m "Generated tag from GitHub Action"
        git push --tags

    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ steps.create_tag.outputs.tag_name }}
    #     release_name: Release ${{ steps.create_tag.outputs.tag_name }}
    #     draft: false
    #     prerelease: false

    # - name: Upload Release Asset
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./manifest.txt
    #     asset_name: manifest.txt
    #     asset_content_type: text/plain

    - name: Create release
      id: create_release
      uses: "actions/github-script@v6"
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
        script: |
          let upload_url = '';
          try {
            const release = await github.rest.repos.createRelease({
              draft: false,
              body: "Release created by GitHub Actions",
              name: ${{ steps.create_tag.outputs.tag_name }},
              owner: context.repo.owner,
              prerelease: true,
              repo: context.repo.repo,
              tag_name: ${{ steps.create_tag.outputs.tag_name }},
            });
            upload_url = release.data.upload_url;
          } catch (error) {
            core.setFailed(error.message);
          }
          console.log(upload_url);
          return upload_url;

    - name: Upload Release Asset
      uses: "actions/github-script@v6"
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const manifestPath = path.join(process.env.GITHUB_WORKSPACE, 'manifest.txt');
            const manifestData = fs.readFileSync(manifestPath);

            await github.rest.repos.uploadReleaseAsset({
              url: ${{ steps.create_release.outputs.upload_url }},
              headers: {
                'content-type': 'text/plain',
                'content-length': manifestData.length
              },
              name: 'manifest.txt',
              data: manifestData
            });

          } catch (error) {
            core.setFailed(error.message);
          }
